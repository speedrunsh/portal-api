// Code generated by capnpc-go. DO NOT EDIT.

package command

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Adder struct{ Client *capnp.Client }

// Adder_TypeID is the unique identifier for the type Adder.
const Adder_TypeID = 0xe0ec0f4120186552

func (c Adder) Add(ctx context.Context, params func(Adder_add_Params) error) (Adder_add_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe0ec0f4120186552,
			MethodID:      0,
			InterfaceName: "command.capnp:Adder",
			MethodName:    "add",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Adder_add_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Adder_add_Results_Future{Future: ans.Future()}, release
}

func (c Adder) AddRef() Adder {
	return Adder{
		Client: c.Client.AddRef(),
	}
}

func (c Adder) Release() {
	c.Client.Release()
}

// A Adder_Server is a Adder with a local implementation.
type Adder_Server interface {
	Add(context.Context, Adder_add) error
}

// Adder_NewServer creates a new Server from an implementation of Adder_Server.
func Adder_NewServer(s Adder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Adder_Methods(nil, s), s, c, policy)
}

// Adder_ServerToClient creates a new Client from an implementation of Adder_Server.
// The caller is responsible for calling Release on the returned Client.
func Adder_ServerToClient(s Adder_Server, policy *server.Policy) Adder {
	return Adder{Client: capnp.NewClient(Adder_NewServer(s, policy))}
}

// Adder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Adder_Methods(methods []server.Method, s Adder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe0ec0f4120186552,
			MethodID:      0,
			InterfaceName: "command.capnp:Adder",
			MethodName:    "add",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Add(ctx, Adder_add{call})
		},
	})

	return methods
}

// Adder_add holds the state for a server call to Adder.add.
// See server.Call for documentation.
type Adder_add struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Adder_add) Args() Adder_add_Params {
	return Adder_add_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Adder_add) AllocResults() (Adder_add_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Adder_add_Results{Struct: r}, err
}

type Adder_add_Params struct{ capnp.Struct }

// Adder_add_Params_TypeID is the unique identifier for the type Adder_add_Params.
const Adder_add_Params_TypeID = 0xd3ec3db59a7b9bd5

func NewAdder_add_Params(s *capnp.Segment) (Adder_add_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Adder_add_Params{st}, err
}

func NewRootAdder_add_Params(s *capnp.Segment) (Adder_add_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Adder_add_Params{st}, err
}

func ReadRootAdder_add_Params(msg *capnp.Message) (Adder_add_Params, error) {
	root, err := msg.Root()
	return Adder_add_Params{root.Struct()}, err
}

func (s Adder_add_Params) String() string {
	str, _ := text.Marshal(0xd3ec3db59a7b9bd5, s.Struct)
	return str
}

func (s Adder_add_Params) A() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Adder_add_Params) SetA(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Adder_add_Params) B() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Adder_add_Params) SetB(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

// Adder_add_Params_List is a list of Adder_add_Params.
type Adder_add_Params_List struct{ capnp.List }

// NewAdder_add_Params creates a new list of Adder_add_Params.
func NewAdder_add_Params_List(s *capnp.Segment, sz int32) (Adder_add_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Adder_add_Params_List{l}, err
}

func (s Adder_add_Params_List) At(i int) Adder_add_Params { return Adder_add_Params{s.List.Struct(i)} }

func (s Adder_add_Params_List) Set(i int, v Adder_add_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Adder_add_Params_List) String() string {
	str, _ := text.MarshalList(0xd3ec3db59a7b9bd5, s.List)
	return str
}

// Adder_add_Params_Future is a wrapper for a Adder_add_Params promised by a client call.
type Adder_add_Params_Future struct{ *capnp.Future }

func (p Adder_add_Params_Future) Struct() (Adder_add_Params, error) {
	s, err := p.Future.Struct()
	return Adder_add_Params{s}, err
}

type Adder_add_Results struct{ capnp.Struct }

// Adder_add_Results_TypeID is the unique identifier for the type Adder_add_Results.
const Adder_add_Results_TypeID = 0x8da1b0d8c3aba79a

func NewAdder_add_Results(s *capnp.Segment) (Adder_add_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Adder_add_Results{st}, err
}

func NewRootAdder_add_Results(s *capnp.Segment) (Adder_add_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Adder_add_Results{st}, err
}

func ReadRootAdder_add_Results(msg *capnp.Message) (Adder_add_Results, error) {
	root, err := msg.Root()
	return Adder_add_Results{root.Struct()}, err
}

func (s Adder_add_Results) String() string {
	str, _ := text.Marshal(0x8da1b0d8c3aba79a, s.Struct)
	return str
}

func (s Adder_add_Results) Result() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Adder_add_Results) SetResult(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// Adder_add_Results_List is a list of Adder_add_Results.
type Adder_add_Results_List struct{ capnp.List }

// NewAdder_add_Results creates a new list of Adder_add_Results.
func NewAdder_add_Results_List(s *capnp.Segment, sz int32) (Adder_add_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Adder_add_Results_List{l}, err
}

func (s Adder_add_Results_List) At(i int) Adder_add_Results {
	return Adder_add_Results{s.List.Struct(i)}
}

func (s Adder_add_Results_List) Set(i int, v Adder_add_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Adder_add_Results_List) String() string {
	str, _ := text.MarshalList(0x8da1b0d8c3aba79a, s.List)
	return str
}

// Adder_add_Results_Future is a wrapper for a Adder_add_Results promised by a client call.
type Adder_add_Results_Future struct{ *capnp.Future }

func (p Adder_add_Results_Future) Struct() (Adder_add_Results, error) {
	s, err := p.Future.Struct()
	return Adder_add_Results{s}, err
}

const schema_85d3acc39d94e0f8 = "x\xdad\x90\xbbJ\x03A\x18\x85\xcf\x99\x99u\xd3x" +
	"\x19'\x85\x85\x82J\x0a\x05\x0d\x8aV\x01IR\x88m" +
	"&o0f\xb63\x176\x8a\x85\xb5\xa5\x9d\x85D," +
	"\"\x88\x88\x166>Aj\xab X\xe6\x01\xf2\x00b" +
	"\xb3\x92\xc0.\xa2\xed\xff\x1f\xbe\xc3\xf9\x16n*b7" +
	"h\x0b\xc0.\x073I\xef\xf1y\xf0\xf9\xda\xbf\x82\xcd" +
	"\x93\x80\x0a\x81\xbd\x15\x0a\x82f\x8de0\xf9\xb8\xbd\xe8" +
	"\xbd\x1d\x8c\x87\xbf\x02\xa6\xcao\xd0\x1c\xf2\x1cL\xea\xd1" +
	"\xd2ju~<\x82\x9e\x93\xc9\xd7\xe8\xfan\xf02\xbc" +
	"\x04h\xfa\xbc7O\x9c\xc4\x1fxd\xde\x19b+i" +
	"\xb4\x9bM\xd7\xf2E\xd9p\x9dV\xa7T\xf5>\x8a\x8b" +
	"\xce\xfbB=\xea\x9e\x9d\x9cva\x95T\x80\"\xa0g" +
	"K\x80\xcdI\xda\xbc`9\x9e\xfe\xa9 \xa8\xc0\x8c#" +
	"\xfer\xca5\x17\xbbf\xd7\xe62\xcc\xe6\"`\x0b\x92" +
	"vGP\x93\xd3\x11z{r\xdc\x90\xb4\xfb\x82t)" +
	"\x96\xc7\xff\x0a\x98\x16\x84>\x8ak\xa4U2\x002)" +
	"L\xf5i\xbd\x0e\xa1\x830t\xdeWX#\x7f\x02\x00" +
	"\x00\xff\xff\xb8VY\xc1"

func init() {
	schemas.Register(schema_85d3acc39d94e0f8,
		0x8da1b0d8c3aba79a,
		0xd3ec3db59a7b9bd5,
		0xe0ec0f4120186552)
}
